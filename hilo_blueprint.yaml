blueprint:
  name: Blueprint Hilo
  description: Blueprint permettant de configurer la température des thermostats selon le statut du sensor defi hilo. L'intégration HACS Hilo avec Home Assistant est requise pour utiliser ce blueprint.
  domain: automation
  input:
    thermostats_defi:
      name: Thermostats Défi
      selector:
        target:
          entity:
            domain: climate
    # temperature_scheduled:
    #   name: Température Schédulé
    #   description: Température à configrer lorsque le sensor.defi_hilo est dans le statut scheduled.
    #   selector:
    #     number:
    #       min: 15
    #       max: 25
    #       unit_of_measurement: celcius
    temperature_appreciation:
      name: Température lors des périodes d'ancrage
      description: Température à configrer lorsque le sensor.defi_hilo est dans le statut appreciation. C'est la température à à configurer lorsque le système est dans sa période d'ancrage.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius      
    temperature_pre_heat:
      name: Température de Pré Chauffage
      description: Température à configrer lorsque le sensor.defi_hilo est dans le statut pre_heat. C'est la température à monter la maison avant le début du défi.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius
    temperature_reduction:
      name: Température lors du défi
      description: Température à configrer lorsque le sensor.defi_hilo est dans le statut reduction. C'est la température à descendre la maison lors du début du défi.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius
    temperature_recovery:
      name: Température de retour à la normale
      description: Température à configrer lorsque le sensor.defi_hilo est dans le statut recovery. C'est la température de retour à la normale après le défi.
      selector:
        number:
          min: 15
          max: 25
          unit_of_measurement: celcius    
variables:
  # temperature_scheduled_state: !input temperature_scheduled
  temperature_appreciation_state: !input temperature_appreciation
  temperature_pre_heat_state: !input temperature_pre_heat
  temperature_reduction_state: !input temperature_reduction
  temperature_recovery_state: !input temperature_recovery  
triggers:
  - trigger: state
    entity_id: sensor.defi_hilo
    to: scheduled
    id: defi_scheduled
  - trigger: state
    entity_id: sensor.defi_hilo
    to: pre_heat
    id: defi_pre_heat
  - trigger: state
    entity_id: sensor.defi_hilo
    to: reduction
    id: defi_reduction
  - trigger: state
    entity_id: sensor.defi_hilo
    to: recovery
    id: defi_recovery
  - trigger: state
    entity_id: sensor.defi_hilo
    to: appreciation
    id: defi_appreciation
actions:
  - choose:
      # - conditions:
      #     - condition: trigger
      #       id: defi_scheduled
      #   sequence:
      #     - action: climate.set_temperature
      #       data:
      #         temperature: "{{ temperature_scheduled_state }}"
      #       target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_pre_heat
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_pre_heat_state }}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_reduction
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_reduction_state }}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_recovery
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_recovery_state }}"
            target: !input thermostats_defi
      - conditions:
          - condition: trigger
            id: defi_appreciation
        sequence:
          - action: climate.set_temperature
            data:
              temperature: "{{ temperature_appreciation_state }}"
            target: !input thermostats_defi
